#!/usr/bin/env python

import sys
import re
from subprocess import check_output

# Collect the parameters
commit_msg_filepath = sys.argv[1]
if len(sys.argv) > 2:
    commit_type = sys.argv[2]
else:
    commit_type = ''
if len(sys.argv) > 3:
    commit_hash = sys.argv[3]
else:
    commit_hash = ''

print("prepare-commit-msg: File: %s\nType: %s\nHash: %s" %
      (commit_msg_filepath, commit_type, commit_hash))

branch = check_output(['git', 'symbolic-ref', '--short', 'HEAD']).strip()
print("prepare-commit-msg: On branch '%s'" % branch)

semantic_experimental = re.match('^(lab|exp)/(.*)', branch)

if semantic_experimental:
    semantic_name = semantic_experimental.group(1)

    with open(commit_msg_filepath, 'r+') as f:
        content = f.read()
        f.seek(0, 0)
        f.write("%s: %s" % (semantic_name, content))


semantic_commits = re.match(
    '^(build|ci|feat|fix|docs|style|refactor|test|chore|lab|perf)/(.*)/', branch)

if semantic_commits:
    semantic_name = semantic_commits.group(1)
    issue_number = semantic_commits.group(2)

    if semantic_name and issue_number:
        with open(commit_msg_filepath, 'r+') as f:
            content = f.read()
            f.seek(0, 0)
            f.write("%s(%s): %s" % (semantic_name, issue_number, content))
    else:
        with open(commit_msg_filepath, 'r+') as f:
            content = f.read()
            f.seek(0, 0)
            f.write("%s" % (content))
